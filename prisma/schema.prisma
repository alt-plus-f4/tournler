generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String? @db.Uuid
  type              String  @db.VarChar
  provider          String  @db.VarChar
  providerAccountId String  @db.VarChar
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String? @db.VarChar
  scope             String? @db.VarChar
  id_token          String?
  session_state     String? @db.VarChar
  user              User?   @relation(fields: [userId], references: [id], onDelete: Cascade) // Optional relation to handle orphan accounts

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @db.VarChar
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id    String  @id @default(uuid()) @db.Uuid
  email String  @unique @db.VarChar
  name  String? @db.VarChar
  image String? @map("image") @db.VarChar

  isOnboardingCompleted Boolean   @default(false) @map("is_onboarding_completed")
  emailVerified         DateTime? @map("email_verified") @db.Timestamp(6)
  role                  Int       @default(0)

  discord DiscordAccount?
  steam   SteamAccount?

  cs2TeamId          Int?
  cs2Team            Cs2Team?            @relation(name: "CS2TeamMembers", fields: [cs2TeamId], references: [id], onDelete: SetNull, onUpdate: Restrict)
  cs2TeamCaptain     Cs2Team?            @relation(name: "CS2TeamCaptain")
  cs2TeamInvitations Cs2TeamInvitation[]

  accounts Account[]
  sessions Session[]

  @@index([cs2TeamId])
}

model Cs2Tournament {
  id   Int    @id @default(autoincrement())
  name String @unique

  startDate DateTime
  endDate   DateTime

  bannerUrl String?
  logoUrl   String?

  prizePool    Int?
  teams        Cs2Team[] @relation("TournamentTeams")
  teamCapacity Int

  location String
  type     Int
  status   Int
}

model Cs2Team {
  id Int @id @default(autoincrement())

  name String  @unique
  logo String?

  members User[] @relation("CS2TeamMembers")

  capitanId String? @unique
  capitan   User?   @relation("CS2TeamCaptain", fields: [capitanId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  teamInvitations Cs2TeamInvitation[] @relation(name: "TeamInvitations")
  Cs2Tournament   Cs2Tournament?      @relation("TournamentTeams", fields: [cs2TournamentId], references: [id])
  cs2TournamentId Int?

  @@index([cs2TournamentId])
  @@map("cs2_teams")
}

model Cs2TeamInvitation {
  id Int @id @default(autoincrement())

  teamId Int
  team   Cs2Team @relation(name: "TeamInvitations", fields: [teamId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([userId])
  @@map("cs2_team_invitations")
}

model SteamAccount {
  id      String @id @default(uuid()) @db.Uuid
  userId  String @unique @db.Uuid
  steamId String @unique @db.VarChar
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DiscordAccount {
  id          String @id @default(uuid()) @db.Uuid
  userId      String @unique @db.Uuid
  discordId   String @unique @db.VarChar
  accessToken String @db.VarChar
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @db.VarChar
  token      String   @db.VarChar
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
}
