generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String? @db.Uuid
  type              String  @db.VarChar
  provider          String  @db.VarChar
  providerAccountId String  @db.VarChar
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String? @db.VarChar
  scope             String? @db.VarChar
  id_token          String?
  session_state     String? @db.VarChar
  user              User?   @relation(fields: [userId], references: [id], onDelete: Cascade) // Optional relation to handle orphan accounts

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @db.VarChar
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String          @id @default(uuid()) @db.Uuid
  email                 String          @unique @db.VarChar
  name                  String?         @db.VarChar
  image                 String?         @db.VarChar @map("image")

  isOnboardingCompleted Boolean         @default(false) @map("is_onboarding_completed")
  emailVerified         DateTime?       @map("email_verified") @db.Timestamp(6)
  role                  Int             @default(0)

  discord               DiscordAccount? 
  steam                 SteamAccount?   

  accounts              Account[]       
  sessions              Session[]       
}

model SteamAccount {
  id      String @id @default(uuid()) @db.Uuid
  userId  String @unique @db.Uuid
  steamId String @unique @db.VarChar
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DiscordAccount {
  id          String  @id @default(uuid()) @db.Uuid
  userId      String  @unique @db.Uuid
  discordId   String  @unique @db.VarChar
  accessToken String  @db.VarChar
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @db.VarChar
  token      String   @db.VarChar
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
}
